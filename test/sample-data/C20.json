{
  "stats": {
    "suites": 12,
    "tests": 24,
    "passes": 22,
    "pending": 0,
    "failures": 4,
    "start": "2018-08-07T00:52:50.684Z",
    "end": "2018-08-07T00:53:57.524Z",
    "duration": 66840,
    "testsRegistered": 24,
    "passPercent": 91.7,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "ffc3f04d-8c35-49d3-9c3c-8e2c4ec3b12b",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "eedd5ad9-e0f2-4943-8b25-cbe5378ca6ec",
        "title": "generic container - files",
        "fullFile": "/Users/nico.hsieh/Documents/Development/netflix-web-components/da-testing-framework/tests/active/containers/generic-source/01.file.test.js",
        "file": "/tests/active/containers/generic-source/01.file.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "generic container - files \"before all\" hook",
            "timedOut": false,
            "duration": 19,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "variables.initValues(client.globals);\nconst backupPath = `${client.globals.target.context}/backup.json`;\nconst manifestPath = `${client.globals.target.context}/manifest.json`;\nconst loadJSON = (url, kind) => {\n  return new Promise((resolve, reject) => {\n    request(url, (err, res, body) => {\n      if (err) {\n        reject(err);\n      }\n      const bodyObj = JSON.parse(body);\n      let obj = {\n        err,\n        res,\n        body,\n        bodyObj\n      };\n      if (kind === 'manifest') {\n        obj.componentIds = bodyObj.rootComponents.map(item => {\n          return item.id;\n        });\n        manifestRes = obj;\n      } else {\n        obj.assetKeys = Object.keys(bodyObj.rootAssets);\n        backupRes = obj;\n      }\n      resolve();\n    });\n  });\n};\nconst loadManifest = loadJSON(manifestPath, 'manifest');\nconst loadBackup = loadJSON(backupPath, 'backup');\nPromise.all([loadManifest, loadBackup])\n  .then(() => {\n    done();\n  })\n  .catch(err => {\n    throw err;\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "13880284-fab8-4469-9e65-0eb3c1d5d2e6",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "generic container - files \"after all\" hook",
            "timedOut": false,
            "duration": 64,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "client.end(function () {\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "aa948180-3f2b-433a-86c3-253b7d26c82e",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "has matching backup.json and manifest.json",
            "fullTitle": "generic container - files has matching backup.json and manifest.json",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "/*___required___*/\n// collect all objects from manifest.json\nconst formattedManifestKeys = manifestRes.bodyObj.rootComponents.map(item => {\n  const assetType = item.type === 'monetVideo' ? 'video' : item.type;\n  return `${assetType}.${item.id}`;\n});\nconst sortedManifestKeys = formattedManifestKeys.sort();\nconst sortedBackupKeys = backupRes.assetKeys.sort();\n// compare two arrays\nconst arraysIdentical = sortedManifestKeys.join(',') === sortedBackupKeys.join(',');\nclient.assert.equal(arraysIdentical, true);",
            "err": {},
            "isRoot": false,
            "uuid": "4b2749e2-9552-428d-a2fe-32d1d8cb2b79",
            "isHook": false,
            "skipped": false,
            "label": "required"
          }
        ],
        "suites": [
          {
            "uuid": "b8bef76e-da64-4927-b861-8b7677a49d70",
            "title": "manifest.json",
            "fullFile": "/Users/nico.hsieh/Documents/Development/netflix-web-components/da-testing-framework/tests/active/containers/generic-source/01.file.test.js",
            "file": "/tests/active/containers/generic-source/01.file.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "is present",
                "fullTitle": "generic container - files manifest.json is present",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "/*___required___*/\nclient.assert.equal(manifestRes.res.statusCode, 200);",
                "err": {},
                "isRoot": false,
                "uuid": "ed5f66fa-8255-4d65-bb92-9069850d895a",
                "isHook": false,
                "skipped": false,
                "label": "required"
              },
              {
                "title": "doesn't have duplicate ids",
                "fullTitle": "generic container - files manifest.json doesn't have duplicate ids",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "/*___required___*/\nconst ids = manifestRes.bodyObj.rootComponents.map(item => {\n  return item.id;\n});\nconst sortedIds = ids.sort();\nlet duplication = false;\nfor (let i = 0; i < sortedIds.length - 1; i++) {\n  if (sortedIds[i] === sortedIds[i + 1]) {\n    duplication = true;\n  }\n}\nclient.assert.equal(duplication, false);",
                "err": {},
                "isRoot": false,
                "uuid": "9c069ac3-29d4-4548-aae2-d3c8b3fa77ce",
                "isHook": false,
                "skipped": false,
                "label": "required"
              },
              {
                "title": "has an agencyName field",
                "fullTitle": "generic container - files manifest.json has an agencyName field",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "/*___nice-to-have___*/\nclient.assert.ok(manifestRes.bodyObj.agencyName);",
                "err": {},
                "isRoot": false,
                "uuid": "fc13c3d1-4864-4bb0-9874-1974cc9792b5",
                "isHook": false,
                "skipped": false,
                "label": "nice-to-have"
              },
              {
                "title": "has a width field with a number value",
                "fullTitle": "generic container - files manifest.json has a width field with a number value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "/*___required___*/\nconst width = manifestRes.bodyObj.width;\nclient.assert.ok(width);\nclient.assert.ok(parseInt(width));",
                "err": {},
                "isRoot": false,
                "uuid": "afa4ec5a-9a39-4eb3-aaef-02b626fe0ce1",
                "isHook": false,
                "skipped": false,
                "label": "required"
              },
              {
                "title": "has a height field with a number value",
                "fullTitle": "generic container - files manifest.json has a height field with a number value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "/*___required___*/\nconst height = manifestRes.bodyObj.height;\nclient.assert.ok(height);\nclient.assert.ok(parseInt(height));",
                "err": {},
                "isRoot": false,
                "uuid": "e0340516-908e-4467-ad12-f371cde25bf4",
                "isHook": false,
                "skipped": false,
                "label": "required"
              }
            ],
            "suites": [
              {
                "uuid": "7d9cf6ee-7598-41b3-9d41-9a6dd51140f4",
                "title": "rootComponents",
                "fullFile": "/Users/nico.hsieh/Documents/Development/netflix-web-components/da-testing-framework/tests/active/containers/generic-source/01.file.test.js",
                "file": "/tests/active/containers/generic-source/01.file.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "has Exit_URL_iOS id",
                    "fullTitle": "generic container - files manifest.json rootComponents has Exit_URL_iOS id",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "/*___required___*/\nclient.assert.equal(manifestRes.componentIds.includes('Exit_URL_iOS'), true);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cdff39fe-19a4-462a-ad54-b1a590d75003",
                    "isHook": false,
                    "skipped": false,
                    "label": "required"
                  },
                  {
                    "title": "has Exit_URL_Android id",
                    "fullTitle": "generic container - files manifest.json rootComponents has Exit_URL_Android id",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "/*___required___*/\nclient.assert.equal(manifestRes.componentIds.includes('Exit_URL_Android'), true);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4e01eadd-e31e-431f-8f5d-f0571404dd5e",
                    "isHook": false,
                    "skipped": false,
                    "label": "required"
                  },
                  {
                    "title": "has Exit_URL_Desktop id",
                    "fullTitle": "generic container - files manifest.json rootComponents has Exit_URL_Desktop id",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "/*___required___*/\nclient.assert.equal(manifestRes.componentIds.includes('Exit_URL_Desktop'), true);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b34d2c86-d2df-4480-9a06-3bbf826378b4",
                    "isHook": false,
                    "skipped": false,
                    "label": "required"
                  }
                ],
                "suites": [],
                "passes": [
                  "cdff39fe-19a4-462a-ad54-b1a590d75003",
                  "4e01eadd-e31e-431f-8f5d-f0571404dd5e",
                  "b34d2c86-d2df-4480-9a06-3bbf826378b4"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 10000
              }
            ],
            "passes": [
              "ed5f66fa-8255-4d65-bb92-9069850d895a",
              "9c069ac3-29d4-4548-aae2-d3c8b3fa77ce",
              "fc13c3d1-4864-4bb0-9874-1974cc9792b5",
              "afa4ec5a-9a39-4eb3-aaef-02b626fe0ce1",
              "e0340516-908e-4467-ad12-f371cde25bf4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "9ccf132f-73da-4a82-bc6f-1d8ccf24562a",
            "title": "backup.json",
            "fullFile": "/Users/nico.hsieh/Documents/Development/netflix-web-components/da-testing-framework/tests/active/containers/generic-source/01.file.test.js",
            "file": "/tests/active/containers/generic-source/01.file.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "is present",
                "fullTitle": "generic container - files backup.json is present",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "/*___required___*/\nclient.assert.equal(backupRes.res.statusCode, 200);",
                "err": {},
                "isRoot": false,
                "uuid": "f1133569-2559-45dc-83ea-31d7f7643019",
                "isHook": false,
                "skipped": false,
                "label": "required"
              },
              {
                "title": "doesn't have duplicate keys",
                "fullTitle": "generic container - files backup.json doesn't have duplicate keys",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "/*___required___*/\nlet duplication = false;\nbackupRes.assetKeys.forEach(item => {\n  const regEx = new RegExp(`\"${item}\"`, 'g');\n  const matches = backupRes.body.match(regEx);\n  if (matches.length > 1) {\n    duplication = true;\n  }\n});\nclient.assert.equal(duplication, false);",
                "err": {},
                "isRoot": false,
                "uuid": "eac06126-8bae-4f13-8d37-86f658a99b9e",
                "isHook": false,
                "skipped": false,
                "label": "required"
              }
            ],
            "suites": [
              {
                "uuid": "8254de05-ec8f-491d-b13c-eb66314c0880",
                "title": "rootAssets",
                "fullFile": "/Users/nico.hsieh/Documents/Development/netflix-web-components/da-testing-framework/tests/active/containers/generic-source/01.file.test.js",
                "file": "/tests/active/containers/generic-source/01.file.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "has an url.Exit_URL_iOS field",
                    "fullTitle": "generic container - files backup.json rootAssets has an url.Exit_URL_iOS field",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "/*___required___*/\nclient.assert.equal(backupRes.assetKeys.includes('url.Exit_URL_iOS'), true);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6044d975-7cc6-4dac-93d2-ca9538d61284",
                    "isHook": false,
                    "skipped": false,
                    "label": "required"
                  },
                  {
                    "title": "has an url.Exit_URL_Android field",
                    "fullTitle": "generic container - files backup.json rootAssets has an url.Exit_URL_Android field",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "/*___required___*/\nclient.assert.equal(backupRes.assetKeys.includes('url.Exit_URL_Android'), true);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "58dfbaf5-eb65-4d28-8d8f-fedce4776606",
                    "isHook": false,
                    "skipped": false,
                    "label": "required"
                  },
                  {
                    "title": "has an url.Exit_URL_Desktop field",
                    "fullTitle": "generic container - files backup.json rootAssets has an url.Exit_URL_Desktop field",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "/*___required___*/\nclient.assert.equal(backupRes.assetKeys.includes('url.Exit_URL_Desktop'), true);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6c3aadc6-48c1-4594-a498-d88606f351c7",
                    "isHook": false,
                    "skipped": false,
                    "label": "required"
                  }
                ],
                "suites": [],
                "passes": [
                  "6044d975-7cc6-4dac-93d2-ca9538d61284",
                  "58dfbaf5-eb65-4d28-8d8f-fedce4776606",
                  "6c3aadc6-48c1-4594-a498-d88606f351c7"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1,
                "root": false,
                "rootEmpty": false,
                "_timeout": 10000
              }
            ],
            "passes": [
              "f1133569-2559-45dc-83ea-31d7f7643019",
              "eac06126-8bae-4f13-8d37-86f658a99b9e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [
          "4b2749e2-9552-428d-a2fe-32d1d8cb2b79"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      },
      {
        "uuid": "94620e3f-d85f-4dfd-bc9f-eb997d06f714",
        "title": "generic container - network",
        "fullFile": "/Users/nico.hsieh/Documents/Development/netflix-web-components/da-testing-framework/tests/active/containers/generic-source/02.network.test.js",
        "file": "/tests/active/containers/generic-source/02.network.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "generic container - network \"before all\" hook",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "// init bmp proxy\nbmp\n  .init(client.globals.bmpApi, client.globals.harPort)\n  .then(() => {\n    bmp.resetHAR('Test Page');\n  })\n  .then(() => {\n    client.url(getVal('adUrlBackup'));\n    done();\n  })\n  .catch(err => {\n    log(err);\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "ef34e706-acd8-4193-8a03-27f5348567c8",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "generic container - network \"after all\" hook",
            "timedOut": false,
            "duration": 62,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "client.end(function() {\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "866ad996-5b7d-48a7-a9d2-7f6e4809dd58",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "c33a2a37-46cd-489d-a5b3-e45a8a476a72",
            "title": "Monet life cycle",
            "fullFile": "/Users/nico.hsieh/Documents/Development/netflix-web-components/da-testing-framework/tests/active/containers/generic-source/02.network.test.js",
            "file": "/tests/active/containers/generic-source/02.network.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "reports BUILD_MONET_REQUEST",
                "fullTitle": "generic container - network Monet life cycle reports BUILD_MONET_REQUEST",
                "timedOut": false,
                "duration": 7837,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "/*___required___*/\n// wait for the max ad life cycle 15 seconds\nclient.pause(6 * 1000, () => {\n  eventIsPresentInRequests('BUILD_MONET_REQUEST', client);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "26e64f93-2d4a-4fc1-be16-e41bb55c30b1",
                "isHook": false,
                "skipped": false,
                "label": "required"
              },
              {
                "title": "reports MONET_AD_VISIBLE",
                "fullTitle": "generic container - network Monet life cycle reports MONET_AD_VISIBLE",
                "timedOut": false,
                "duration": 1003,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "/*___required___*/\nclient.pause(1 * 1000, () => {\n  eventIsPresentInRequests('MONET_AD_VISIBLE', client);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "95f95b2e-fa60-49c5-b3cd-2c0bb9e07384",
                "isHook": false,
                "skipped": false,
                "label": "required"
              },
              {
                "title": "reports MONET_ASSETS_LOADED",
                "fullTitle": "generic container - network Monet life cycle reports MONET_ASSETS_LOADED",
                "timedOut": false,
                "duration": 1004,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "/*___required___*/\nclient.pause(1 * 1000, () => {\n  eventIsPresentInRequests('MONET_ASSETS_LOADED', client);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9f8e1e5f-987a-458b-aa28-b8ef1553db24",
                "isHook": false,
                "skipped": false,
                "label": "required"
              }
            ],
            "suites": [],
            "passes": [
              "26e64f93-2d4a-4fc1-be16-e41bb55c30b1",
              "95f95b2e-fa60-49c5-b3cd-2c0bb9e07384",
              "9f8e1e5f-987a-458b-aa28-b8ef1553db24"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9844,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      },
      {
        "uuid": "49c3ec0a-6a2f-4544-9f7a-27f81ca17065",
        "title": "generic container - elements",
        "fullFile": "/Users/nico.hsieh/Documents/Development/netflix-web-components/da-testing-framework/tests/active/containers/generic-source/03.element.test.js",
        "file": "/tests/active/containers/generic-source/03.element.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "generic container - elements \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "client.url(variables.getVal('adUrlBackup'));\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "a8b806ed-eb88-4610-b2b0-612b64706fd5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "generic container - elements \"after all\" hook",
            "timedOut": false,
            "duration": 58,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "client.end(function() {\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "702f5f97-334a-4401-b4b4-fffb90ccd119",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "c1400b8c-b13e-464e-874b-6fe592341751",
            "title": "monet-integrator",
            "fullFile": "/Users/nico.hsieh/Documents/Development/netflix-web-components/da-testing-framework/tests/active/containers/generic-source/03.element.test.js",
            "file": "/tests/active/containers/generic-source/03.element.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "is present within 3 seconds",
                "fullTitle": "generic container - elements monet-integrator is present within 3 seconds",
                "timedOut": false,
                "duration": 753,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "/*___required___*/\nclient.waitForElementPresent('monet-integrator', 3000, () => {\n  // write data to window for later user\n  // can't access directly since it is a promise\n  client.execute(function() {\n    var mi = document.querySelector('monet-integrator');\n    // TODO: use monet data when network reroute is complete\n    mi.getBackupMonetData().then(function(data) {\n      window.monetData = data;\n    });\n  });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7f43d54f-0067-435f-9072-5b6a97df5c93",
                "isHook": false,
                "skipped": false,
                "label": "required"
              },
              {
                "title": "is ready after 2 seconds",
                "fullTitle": "generic container - elements monet-integrator is ready after 2 seconds",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "client =>\n  pause(2000).getAttribute('monet-integrator', 'ready', result => {\n    client.assert.equal(result.status, 0);\n    client.assert.notEqual(result.value, null);\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "fbf085f3-b617-4252-afeb-39ccf00bdc79",
                "isHook": false,
                "skipped": false,
                "label": "nice-to-have"
              },
              {
                "title": "has monet data",
                "fullTitle": "generic container - elements monet-integrator has monet data",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "/*___required___*/\n// store the data for later use\nclient.execute(\n  function() {\n    var data = window.monetData;\n    return data;\n  },\n  [],\n  result => {\n    client.assert.equal(result.status, 0);\n    client.assert.ok(Object.keys(result.value).length > 0);\n    monetData = result.value;\n  }\n);",
                "err": {},
                "isRoot": false,
                "uuid": "fba10a55-ea63-46d8-bf1c-43e14fc8c695",
                "isHook": false,
                "skipped": false,
                "label": "required"
              }
            ],
            "suites": [],
            "passes": [
              "7f43d54f-0067-435f-9072-5b6a97df5c93",
              "fbf085f3-b617-4252-afeb-39ccf00bdc79",
              "fba10a55-ea63-46d8-bf1c-43e14fc8c695"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 781,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "cf3c91d6-5759-44c4-879d-839b6dc56963",
            "title": "elements",
            "fullFile": "/Users/nico.hsieh/Documents/Development/netflix-web-components/da-testing-framework/tests/active/containers/generic-source/03.element.test.js",
            "file": "/tests/active/containers/generic-source/03.element.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "uses correct data via data-dynamic-key ",
                "fullTitle": "generic container - elements elements uses correct data via data-dynamic-key ",
                "timedOut": false,
                "duration": 130,
                "state": "passed",
                "speed": "slow",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "/*___nice-to-have___*/\nclient.execute(\n  function() {\n    // scan through the element to discover Netflix components\n    // check for netflix-\n    window.netflixComponents = [];\n    var allNodes = document.body.querySelectorAll('*');\n    var netflixNodeCount = 0;\n    for (var i = 0; i < allNodes.length; i++) {\n      var node = allNodes[i];\n      var name = allNodes[i].tagName.toLocaleLowerCase();\n      var regEx = /^netflix-/;\n      if (regEx.test(name)) {\n        var name = node.tagName.toLocaleLowerCase();\n        var className = name + '-test-target' + netflixNodeCount;\n        netflixNodeCount++;\n        node.classList.add(className);\n        window.netflixComponents.push({\n          name: name,\n          selector: '.' + className,\n          dataDynamicKey: node.getAttribute('data-dynamic-key')\n        });\n        if (name === 'netflix-video' && !node.playing) {\n          // try to play the video to make sure the source is set\n          node.play();\n          setTimeout(() => {\n            el.pause();\n          }, 10);\n        }\n      }\n    }\n    return window.netflixComponents;\n  },\n  [],\n  result => {\n    client.assert.equal(result.status, 0);\n    client.assert.notEqual(result.value.length, 0);\n    netflixComponentsInfo = result.value;\n    result.value.forEach(item => {\n      if (item.dataDynamicKey) {\n        // grab data from json\n        client.execute(\n          function(name, selector) {\n            var el = document.querySelector(selector);\n            var value = '';\n            switch (name) {\n              case 'netflix-cta':\n                value = el.querySelector('.copy span').innerText;\n                break;\n              case 'netflix-text':\n                value = el.querySelector('span').innerText;\n                break;\n              case 'netflix-img':\n                value = el.querySelector('img').src;\n                break;\n              case 'netflix-video':\n                value = el.querySelector('video').getAttribute('src');\n                break;\n              default:\n                value = null;\n                break;\n            }\n            return value;\n          },\n          [item.name, item.selector],\n          result => {\n            client.assert.equal(result.status, 0);\n            const data = monetData.rootAssets;\n            const key = item.dataDynamicKey;\n            switch (item.name) {\n              case 'netflix-cta':\n              case 'netflix-text':\n                client.assert.equal(data[`text.${key}`].text, result.value);\n                break;\n              case 'netflix-img':\n                client.assert.equal(data[`image.${key}`].url, result.value);\n                break;\n              case 'netflix-video':\n                client.assert.equal(data[`video.${key}`].url, result.value);\n                break;\n              default:\n                console.log(`Unknown compoent: ${item - name}`);\n                client.assert.equal(true, true);\n                break;\n            }\n          }\n        );\n      } else {\n        client.assert.equal(true, true);\n      }\n    });\n  }\n);",
                "err": {},
                "isRoot": false,
                "uuid": "c9f9d2f1-9140-4f64-8506-3e11a4657b2f",
                "isHook": false,
                "skipped": false,
                "label": "nice-to-have"
              }
            ],
            "suites": [],
            "passes": [
              "c9f9d2f1-9140-4f64-8506-3e11a4657b2f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 130,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      },
      {
        "uuid": "b7b2f4e1-5204-4136-b9a9-f0aa22ad7f15",
        "title": "generic container - click",
        "fullFile": "/Users/nico.hsieh/Documents/Development/netflix-web-components/da-testing-framework/tests/active/containers/generic-source/04.click.test.js",
        "file": "/tests/active/containers/generic-source/04.click.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "generic container - click \"before all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "// increase listener amount limit\neventEmitter.defaultMaxListeners = 100;\nclient.url(variables.getVal('adUrlBackup'));\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "e05edc98-43ff-49d7-922d-8b33c75674b0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "generic container - click \"after all\" hook",
            "timedOut": false,
            "duration": 373,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "client.end(function() {\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f0ed5ad7-f089-4c48-b03f-0f2a77d39131",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"after each\" hook",
            "fullTitle": "generic container - click \"after each\" hook",
            "timedOut": false,
            "duration": 391,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "client.end(function() {\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0c80fa72-f9fb-40f3-b61a-b1adc5612660",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "6aac6604-688b-4a81-9748-b06b83afd2c8",
            "title": "ad exit",
            "fullFile": "/Users/nico.hsieh/Documents/Development/netflix-web-components/da-testing-framework/tests/active/containers/generic-source/04.click.test.js",
            "file": "/tests/active/containers/generic-source/04.click.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "only has one window open before ad click",
                "fullTitle": "generic container - click ad exit only has one window open before ad click",
                "timedOut": false,
                "duration": 561,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "/*___required___*/\nclient.windowHandles(winResult => {\n  client.assert.equal(winResult.value.length, 1);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7c7d5243-6f93-4369-9659-51cc588cfa89",
                "isHook": false,
                "skipped": false,
                "label": "required"
              },
              {
                "title": "clicks exist in distributed 50x50 rectangles, after 1.5 seconds: screenshot review required",
                "fullTitle": "generic container - click ad exit clicks exist in distributed 50x50 rectangles, after 1.5 seconds: screenshot review required",
                "timedOut": false,
                "duration": 23736,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "\"./images/placeholder.png\"",
                "code": "/*___screenshot-review___*/\nconst adSize = {\n  width: variables.getVal('width'),\n  height: variables.getVal('height')\n};\nconst exitIssueReport = [];\nconst clickIssueReportPath = `${variables.getVal('reportPath')}/images/clickIssueReport/`;\nconst screenshotTempPath = `${clickIssueReportPath}temp/`;\n// const gridReport = [];\nconst exitReport = {\n  zero: 0,\n  one: 0,\n  multiple: 0\n};\nconst _this = this;\n// rule out the edge part of the ad since it is less likely to be clicked\nconst colAmt = ~~((adSize.width - rectSize.width) / rectSize.width);\nconst rowAmt = ~~((adSize.height - rectSize.height) / rectSize.height);\n// let startTime = 0;\nlet lastWinowAmt = 1;\nlet lastValidPosition = {\n  x: rectSize.width * 0.5,\n  y: rectSize.height * 0.5\n};\nfunction gridClickAction({\n  startColValue,\n  startRowValue,\n  startPos,\n  firstMove = {\n    x: 0,\n    y: 0\n  }\n}) {\n  let failedColValue = 0;\n  let failedRowValue = 0;\n  let stopRunning = false;\n  return new Promise((resolve, reject) => {\n    let { x, y } = startPos;\n    client.url(variables.getVal('iframePath')).execute(\n      function(adUrl, width, height) {\n        var iframe = document.createElement('iframe');\n        iframe.setAttribute('width', width);\n        iframe.setAttribute('height', height);\n        iframe.setAttribute('src', adUrl);\n        iframe.setAttribute('frameborder', 0);\n        iframe.style.position = 'absolute';\n        iframe.style.top = '0px';\n        iframe.style.left = '0px';\n        document.body.appendChild(iframe);\n      },\n      [variables.getVal('adUrlBackup'), variables.getVal('width'), variables.getVal('height')],\n      () => {\n        client.pause(pauseTime).moveTo(null, firstMove.x, firstMove.y, () => {\n          for (let i = startColValue; i < colAmt + 1; i++) {\n            for (let k = 0; k < rowAmt + 1; k++) {\n              const lastItem = i === colAmt && k === rowAmt;\n              const offset = getOffset({\n                i,\n                k,\n                rectSize,\n                rowAmt\n              });\n              const { offsetX, offsetY } = offset;\n              if (!(i === startColValue && k < startRowValue)) {\n                client.moveTo(null, offsetX, offsetY, () => {\n                  x += offsetX;\n                  y += offsetY;\n                  if (stopRunning) {\n                    if (lastItem) {\n                      // set value to the last failed index\n                      const resetX = lastValidPosition.x - x;\n                      const resetY = lastValidPosition.y - y;\n                      x += resetX;\n                      y += resetY;\n                      client.moveTo(null, resetX, resetY, () => {\n                        resolve({\n                          col: failedColValue,\n                          row: failedRowValue\n                        });\n                      });\n                    }\n                    return;\n                  }\n                  const screenshotName = `${screenshotTempPath}${i}${k}.png`;\n                  client.saveScreenshot(screenshotName);\n                  client.mouseButtonClick(() => {\n                    client.windowHandles(winResult => {\n                      const exitCount = winResult.value.length - lastWinowAmt;\n                      const x = rectSize.width * 0.5 + rectSize.width * i;\n                      const y = rectSize.height * 0.5 + rectSize.height * k;\n                      // gridReport.push({\n                      //   x,\n                      //   y,\n                      //   exitCount,\n                      //   timeElapsed: startTime === 0 ? 0 : Date.now() - startTime\n                      // });\n                      // startTime = Date.now();\n                      if (exitCount === 1) {\n                        exitReport.one += 1;\n                      } else {\n                        exitIssueReport.push({\n                          screenshot: screenshotName,\n                          point: {\n                            x,\n                            y\n                          },\n                          exitCount\n                        });\n                        if (exitCount === 0) {\n                          exitReport.zero += 1;\n                        } else {\n                          exitReport.multiple += 1;\n                        }\n                        failedColValue = i;\n                        failedRowValue = k;\n                        lastValidPosition = {\n                          x,\n                          y\n                        };\n                        stopRunning = true;\n                      }\n                      lastWinowAmt = winResult.value.length;\n                      if (lastItem) {\n                        resolve();\n                      }\n                    });\n                  });\n                });\n              }\n            }\n          }\n        });\n      }\n    );\n  });\n}\nfunction done() {\n  const perc = exitReport.one / (colAmt * rowAmt);\n  client.assert.equal(exitReport.zero, 0);\n  client.assert.equal(exitReport.multiple, 0);\n  exitIssueReport.forEach(item => {\n    const imgName = createClickIssueGraphic({\n      ...item,\n      rect: rectSize,\n      dir: clickIssueReportPath,\n      pauseTime\n    });\n    addContext(_this, `./images/clickIssueReport/${imgName}`);\n  });\n  rimraf(screenshotTempPath, err => {\n    if (err) {\n      console.log(err);\n    }\n  });\n}\nfunction nextClickAction(startColValue, startRowValue, startPos = null, firstMove) {\n  gridClickAction({\n    startColValue,\n    startRowValue,\n    startPos,\n    firstMove\n  })\n    .then(obj => {\n      if (obj) {\n        const { col, row } = obj;\n        let nextCol = col;\n        let nextRow = row + 1;\n        if (nextRow > rowAmt + 1) {\n          nextRow = 0;\n          nextCol += 1;\n        }\n        // keep going\n        nextClickAction(nextCol, nextRow, lastValidPosition, {\n          x: 0,\n          y: 0\n        });\n      } else {\n        done();\n      }\n    })\n    .catch(err => {\n      throw err;\n    });\n}\n// kick off\nnextClickAction(0, 0, lastValidPosition, lastValidPosition);",
                "err": {
                  "message": "AssertionError: Failed [equal]: (1 == 0) - expected \"0\" but got: \"1\"",
                  "estack": "    at done (tests/active/containers/generic-source/common-tests/adClickTest.js:187:21)\n    at gridClickAction.then.obj (tests/active/containers/generic-source/common-tests/adClickTest.js:229:13)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:118:7)"
                },
                "isRoot": false,
                "uuid": "345ef2f3-31f6-4e74-93e4-36903ed0a9a2",
                "isHook": false,
                "skipped": false,
                "label": "screenshot-review"
              },
              {
                "title": "clicks exist in distributed 50x50 rectangles, after 5 seconds: screenshot review required",
                "fullTitle": "generic container - click ad exit clicks exist in distributed 50x50 rectangles, after 5 seconds: screenshot review required",
                "timedOut": false,
                "duration": 28120,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "context": "\"./images/placeholder.png\"",
                "code": "/*___screenshot-review___*/\nconst adSize = {\n  width: variables.getVal('width'),\n  height: variables.getVal('height')\n};\nconst exitIssueReport = [];\nconst clickIssueReportPath = `${variables.getVal('reportPath')}/images/clickIssueReport/`;\nconst screenshotTempPath = `${clickIssueReportPath}temp/`;\n// const gridReport = [];\nconst exitReport = {\n  zero: 0,\n  one: 0,\n  multiple: 0\n};\nconst _this = this;\n// rule out the edge part of the ad since it is less likely to be clicked\nconst colAmt = ~~((adSize.width - rectSize.width) / rectSize.width);\nconst rowAmt = ~~((adSize.height - rectSize.height) / rectSize.height);\n// let startTime = 0;\nlet lastWinowAmt = 1;\nlet lastValidPosition = {\n  x: rectSize.width * 0.5,\n  y: rectSize.height * 0.5\n};\nfunction gridClickAction({\n  startColValue,\n  startRowValue,\n  startPos,\n  firstMove = {\n    x: 0,\n    y: 0\n  }\n}) {\n  let failedColValue = 0;\n  let failedRowValue = 0;\n  let stopRunning = false;\n  return new Promise((resolve, reject) => {\n    let { x, y } = startPos;\n    client.url(variables.getVal('iframePath')).execute(\n      function(adUrl, width, height) {\n        var iframe = document.createElement('iframe');\n        iframe.setAttribute('width', width);\n        iframe.setAttribute('height', height);\n        iframe.setAttribute('src', adUrl);\n        iframe.setAttribute('frameborder', 0);\n        iframe.style.position = 'absolute';\n        iframe.style.top = '0px';\n        iframe.style.left = '0px';\n        document.body.appendChild(iframe);\n      },\n      [variables.getVal('adUrlBackup'), variables.getVal('width'), variables.getVal('height')],\n      () => {\n        client.pause(pauseTime).moveTo(null, firstMove.x, firstMove.y, () => {\n          for (let i = startColValue; i < colAmt + 1; i++) {\n            for (let k = 0; k < rowAmt + 1; k++) {\n              const lastItem = i === colAmt && k === rowAmt;\n              const offset = getOffset({\n                i,\n                k,\n                rectSize,\n                rowAmt\n              });\n              const { offsetX, offsetY } = offset;\n              if (!(i === startColValue && k < startRowValue)) {\n                client.moveTo(null, offsetX, offsetY, () => {\n                  x += offsetX;\n                  y += offsetY;\n                  if (stopRunning) {\n                    if (lastItem) {\n                      // set value to the last failed index\n                      const resetX = lastValidPosition.x - x;\n                      const resetY = lastValidPosition.y - y;\n                      x += resetX;\n                      y += resetY;\n                      client.moveTo(null, resetX, resetY, () => {\n                        resolve({\n                          col: failedColValue,\n                          row: failedRowValue\n                        });\n                      });\n                    }\n                    return;\n                  }\n                  const screenshotName = `${screenshotTempPath}${i}${k}.png`;\n                  client.saveScreenshot(screenshotName);\n                  client.mouseButtonClick(() => {\n                    client.windowHandles(winResult => {\n                      const exitCount = winResult.value.length - lastWinowAmt;\n                      const x = rectSize.width * 0.5 + rectSize.width * i;\n                      const y = rectSize.height * 0.5 + rectSize.height * k;\n                      // gridReport.push({\n                      //   x,\n                      //   y,\n                      //   exitCount,\n                      //   timeElapsed: startTime === 0 ? 0 : Date.now() - startTime\n                      // });\n                      // startTime = Date.now();\n                      if (exitCount === 1) {\n                        exitReport.one += 1;\n                      } else {\n                        exitIssueReport.push({\n                          screenshot: screenshotName,\n                          point: {\n                            x,\n                            y\n                          },\n                          exitCount\n                        });\n                        if (exitCount === 0) {\n                          exitReport.zero += 1;\n                        } else {\n                          exitReport.multiple += 1;\n                        }\n                        failedColValue = i;\n                        failedRowValue = k;\n                        lastValidPosition = {\n                          x,\n                          y\n                        };\n                        stopRunning = true;\n                      }\n                      lastWinowAmt = winResult.value.length;\n                      if (lastItem) {\n                        resolve();\n                      }\n                    });\n                  });\n                });\n              }\n            }\n          }\n        });\n      }\n    );\n  });\n}\nfunction done() {\n  const perc = exitReport.one / (colAmt * rowAmt);\n  client.assert.equal(exitReport.zero, 0);\n  client.assert.equal(exitReport.multiple, 0);\n  exitIssueReport.forEach(item => {\n    const imgName = createClickIssueGraphic({\n      ...item,\n      rect: rectSize,\n      dir: clickIssueReportPath,\n      pauseTime\n    });\n    addContext(_this, `./images/clickIssueReport/${imgName}`);\n  });\n  rimraf(screenshotTempPath, err => {\n    if (err) {\n      console.log(err);\n    }\n  });\n}\nfunction nextClickAction(startColValue, startRowValue, startPos = null, firstMove) {\n  gridClickAction({\n    startColValue,\n    startRowValue,\n    startPos,\n    firstMove\n  })\n    .then(obj => {\n      if (obj) {\n        const { col, row } = obj;\n        let nextCol = col;\n        let nextRow = row + 1;\n        if (nextRow > rowAmt + 1) {\n          nextRow = 0;\n          nextCol += 1;\n        }\n        // keep going\n        nextClickAction(nextCol, nextRow, lastValidPosition, {\n          x: 0,\n          y: 0\n        });\n      } else {\n        done();\n      }\n    })\n    .catch(err => {\n      throw err;\n    });\n}\n// kick off\nnextClickAction(0, 0, lastValidPosition, lastValidPosition);",
                "err": {
                  "message": "AssertionError: Failed [equal]: (1 == 0) - expected \"0\" but got: \"1\"",
                  "estack": "    at done (tests/active/containers/generic-source/common-tests/adClickTest.js:187:21)\n    at gridClickAction.then.obj (tests/active/containers/generic-source/common-tests/adClickTest.js:229:13)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:118:7)"
                },
                "isRoot": false,
                "uuid": "274114e4-b570-4af3-823f-19fd0bab1f57",
                "isHook": false,
                "skipped": false,
                "label": "screenshot-review"
              }
            ],
            "suites": [],
            "passes": [
              "7c7d5243-6f93-4369-9659-51cc588cfa89"
            ],
            "failures": [
              "345ef2f3-31f6-4e74-93e4-36903ed0a9a2",
              "274114e4-b570-4af3-823f-19fd0bab1f57"
            ],
            "pending": [],
            "skipped": [],
            "duration": 52417,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 10000
  },
  "copyrightYear": 2018
}